{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "======Data Headers Before Dropping Columns=======\n",
      "   PassengerId  Survived  Pclass  \\\n",
      "0            1      Died       3   \n",
      "1            2  Survived       1   \n",
      "2            3  Survived       3   \n",
      "3            4  Survived       1   \n",
      "4            5      Died       3   \n",
      "\n",
      "                                                Name     Sex   Age  SibSp  \\\n",
      "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
      "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
      "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
      "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
      "4                           Allen, Mr. William Henry    male  35.0      0   \n",
      "\n",
      "   Parch            Ticket     Fare Cabin Embarked  \n",
      "0      0         A/5 21171   7.2500   NaN      NaN  \n",
      "1      0          PC 17599  71.2833   C85        C  \n",
      "2      0  STON/O2. 3101282   7.9250   NaN      NaN  \n",
      "3      0            113803  53.1000  C123      NaN  \n",
      "4      0            373450   8.0500   NaN        S  \n",
      "**** \n",
      "\n",
      "DATA TRANSFORMATION *****\n",
      "\n",
      "======Data Headers After Dropping Columns - First Way=======\n",
      "   Survived  Pclass     Sex   Age  SibSp     Fare Cabin Embarked\n",
      "0      Died       3    male  22.0      1   7.2500   NaN      NaN\n",
      "1  Survived       1  female  38.0      1  71.2833   C85        C\n",
      "2  Survived       3  female  26.0      0   7.9250   NaN      NaN\n",
      "3  Survived       1  female  35.0      1  53.1000  C123      NaN\n",
      "4      Died       3    male  35.0      0   8.0500   NaN        S\n",
      "======Data Headers After Dropping Columns - Second Way =======\n",
      "   Survived  Pclass     Sex   Age Cabin Embarked\n",
      "0      Died       3    male  22.0   NaN      NaN\n",
      "1  Survived       1  female  38.0   C85        C\n",
      "2  Survived       3  female  26.0   NaN      NaN\n",
      "3  Survived       1  female  35.0  C123      NaN\n",
      "4      Died       3    male  35.0   NaN        S\n",
      "======Data Headers After Transforming Class Column =======\n",
      "   Survived        Pclass     Sex   Age Cabin Embarked\n",
      "0      Died   Lower Class    male  22.0   NaN      NaN\n",
      "1  Survived  Luxury Class  female  38.0   C85        C\n",
      "2  Survived   Lower Class  female  26.0   NaN      NaN\n",
      "3  Survived  Luxury Class  female  35.0  C123      NaN\n",
      "4      Died   Lower Class    male  35.0   NaN        S\n",
      "======Data Headers After Filling with default value for Embarked Column =======\n",
      "   Survived        Pclass     Sex   Age Cabin Embarked\n",
      "0      Died   Lower Class    male  22.0   NaN        S\n",
      "1  Survived  Luxury Class  female  38.0   C85        C\n",
      "2  Survived   Lower Class  female  26.0   NaN        S\n",
      "3  Survived  Luxury Class  female  35.0  C123        S\n",
      "4      Died   Lower Class    male  35.0   NaN        S\n",
      "======Data Headers After Transforming Embarked Column =======\n",
      "   Survived        Pclass     Sex   Age Cabin     Embarked\n",
      "0      Died   Lower Class    male  22.0   NaN  Southampton\n",
      "1  Survived  Luxury Class  female  38.0   C85    Cherbourg\n",
      "2  Survived   Lower Class  female  26.0   NaN  Southampton\n",
      "3  Survived  Luxury Class  female  35.0  C123  Southampton\n",
      "4      Died   Lower Class    male  35.0   NaN  Southampton\n",
      "\n",
      "\n",
      "\n",
      "**** DATA VISUALIZATIONS****\n",
      "\n",
      "\n",
      "Visualization #1 : Survival Rate Based on Passenger Sitting Class\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Visualization #2 : Survival Rate Based on Gender\n",
      "Survived  Died  Survived\n",
      "Sex                     \n",
      "female      81       233\n",
      "male       468       109\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Visualization #3 : Survival Rate Based on Passenger Age Group\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Visualization #4 : Survival Rate Based on Passenger Embarked Port\n",
      "Survived     Died  Survived\n",
      "Embarked                   \n",
      "Cherbourg      75        93\n",
      "Queenstown     47        30\n",
      "Southampton   427       219\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "titanic_df = pd.read_csv('titanictrain.csv')\n",
    "\n",
    "# Convert the survived column to strings for easier reading\n",
    "titanic_df ['Survived'] = titanic_df ['Survived'].map({\n",
    "    0: 'Died',\n",
    "    1: 'Survived'\n",
    "})\n",
    "\n",
    "\n",
    "print(\"======Data Headers Before Dropping Columns=======\")\n",
    "print(titanic_df.head(5))\n",
    "\n",
    "print(\"**** \\n\\nDATA TRANSFORMATION *****\\n\")\n",
    "\n",
    "print(\"======Data Headers After Dropping Columns - First Way=======\")\n",
    "titanic_df.drop(['Parch','PassengerId','Name','Ticket'], axis=1, inplace=True)\n",
    "print(titanic_df.head(5))\n",
    "print(\"======Data Headers After Dropping Columns - Second Way =======\")\n",
    "titanic_df = titanic_df.drop(['SibSp','Fare'], axis=1)\n",
    "print(titanic_df.head(5))\n",
    "# Convert the Class column to strings for easier reading\n",
    "titanic_df ['Pclass'] = titanic_df ['Pclass'].map({\n",
    "    1: 'Luxury Class',\n",
    "    2: 'Economy Class',\n",
    "    3: 'Lower Class'\n",
    "})\n",
    "\n",
    "print(\"======Data Headers After Transforming Class Column =======\")\n",
    "print(titanic_df.head(5))\n",
    "\n",
    "titanic_df[\"Embarked\"] = titanic_df[\"Embarked\"].fillna(\"S\")\n",
    "print(\"======Data Headers After Filling with default value for Embarked Column =======\")\n",
    "print(titanic_df.head(5))\n",
    "\n",
    "# Convert the Embarked column to strings for easier reading\n",
    "titanic_df ['Embarked'] = titanic_df ['Embarked'].map({\n",
    "    'C':'Cherbourg',\n",
    "    'Q':'Queenstown',\n",
    "    'S':'Southampton'\n",
    "})\n",
    "print(\"======Data Headers After Transforming Embarked Column =======\")\n",
    "print(titanic_df.head(5))\n",
    "\n",
    "print(\"\\n\\n\\n**** DATA VISUALIZATIONS****\\n\\n\")\n",
    "print(\"Visualization #1 : Survival Rate Based on Passenger Sitting Class\")\n",
    "ax = sns.countplot(x = 'Pclass', hue = 'Survived', palette = 'Set1',data = titanic_df)\n",
    "ax.set(title = 'Passenger status (Survived/Died) against Passenger Class',\n",
    "       xlabel = 'Passenger Class', ylabel = 'Total')\n",
    "plt.show()\n",
    "\n",
    "print(\"Visualization #2 : Survival Rate Based on Gender\")\n",
    "print(pd.crosstab(titanic_df[\"Sex\"],titanic_df.Survived))\n",
    "ax = sns.countplot(x = 'Sex', hue = 'Survived', palette = 'Set2', data = titanic_df)\n",
    "ax.set(title = 'Total Survivors According to Sex', xlabel = 'Sex', ylabel='Total')\n",
    "plt.show()\n",
    "\n",
    "print(\"Visualization #3 : Survival Rate Based on Passenger Age Group\")\n",
    "# We look at Age column and set Intevals on the ages and the map them to their categories \n",
    "#as (Children, Teen, Adult, Old)\n",
    "\n",
    "interval = (0,18,35,60,120)\n",
    "categories = ['Children','Teens','Adult', 'Old']\n",
    "titanic_df['Age_cats'] = pd.cut(titanic_df.Age, interval, labels = categories)\n",
    "\n",
    "ax = sns.countplot(x = 'Age_cats',  data = titanic_df, hue = 'Survived', palette = 'Set3')\n",
    "\n",
    "ax.set(xlabel='Age Categorical', ylabel='Total',\n",
    "       title=\"Age Categorical Survival Distribution\")\n",
    "plt.show()\n",
    "\n",
    "print(\"Visualization #4 : Survival Rate Based on Passenger Embarked Port\")\n",
    "print(pd.crosstab(titanic_df['Embarked'], titanic_df.Survived))\n",
    "ax = sns.countplot(x = 'Embarked', hue = 'Survived', palette = 'Set1', data = titanic_df)\n",
    "ax.set(title = 'Survival distribution according to Embarking place')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "======Data Headers Before Dropping Columns=======\n",
      "   PassengerId  Survived  Pclass  \\\n",
      "0            1      Died       3   \n",
      "1            2  Survived       1   \n",
      "2            3  Survived       3   \n",
      "3            4  Survived       1   \n",
      "4            5      Died       3   \n",
      "\n",
      "                                                Name     Sex   Age  SibSp  \\\n",
      "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
      "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
      "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
      "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
      "4                           Allen, Mr. William Henry    male  35.0      0   \n",
      "\n",
      "   Parch            Ticket     Fare Cabin Embarked  \n",
      "0      0         A/5 21171   7.2500   NaN      NaN  \n",
      "1      0          PC 17599  71.2833   C85        C  \n",
      "2      0  STON/O2. 3101282   7.9250   NaN      NaN  \n",
      "3      0            113803  53.1000  C123      NaN  \n",
      "4      0            373450   8.0500   NaN        S  \n",
      "**** \n",
      "\n",
      "DATA TRANSFORMATION *****\n",
      "\n",
      "======Data Headers After Dropping Columns - First Way=======\n",
      "   Survived  Pclass     Sex   Age  SibSp     Fare Cabin Embarked\n",
      "0      Died       3    male  22.0      1   7.2500   NaN      NaN\n",
      "1  Survived       1  female  38.0      1  71.2833   C85        C\n",
      "2  Survived       3  female  26.0      0   7.9250   NaN      NaN\n",
      "3  Survived       1  female  35.0      1  53.1000  C123      NaN\n",
      "4      Died       3    male  35.0      0   8.0500   NaN        S\n",
      "======Data Headers After Dropping Columns - Second Way =======\n",
      "   Survived  Pclass     Sex   Age Cabin Embarked\n",
      "0      Died       3    male  22.0   NaN      NaN\n",
      "1  Survived       1  female  38.0   C85        C\n",
      "2  Survived       3  female  26.0   NaN      NaN\n",
      "3  Survived       1  female  35.0  C123      NaN\n",
      "4      Died       3    male  35.0   NaN        S\n",
      "======Data Headers After Transforming Class Column =======\n",
      "   Survived        Pclass     Sex   Age Cabin Embarked\n",
      "0      Died   Lower Class    male  22.0   NaN      NaN\n",
      "1  Survived  Luxury Class  female  38.0   C85        C\n",
      "2  Survived   Lower Class  female  26.0   NaN      NaN\n",
      "3  Survived  Luxury Class  female  35.0  C123      NaN\n",
      "4      Died   Lower Class    male  35.0   NaN        S\n",
      "======Data Headers After Filling with default value for Embarked Column =======\n",
      "   Survived        Pclass     Sex   Age Cabin Embarked\n",
      "0      Died   Lower Class    male  22.0   NaN        S\n",
      "1  Survived  Luxury Class  female  38.0   C85        C\n",
      "2  Survived   Lower Class  female  26.0   NaN        S\n",
      "3  Survived  Luxury Class  female  35.0  C123        S\n",
      "4      Died   Lower Class    male  35.0   NaN        S\n",
      "======Data Headers After Transforming Embarked Column =======\n",
      "   Survived        Pclass     Sex   Age Cabin     Embarked\n",
      "0      Died   Lower Class    male  22.0   NaN  Southampton\n",
      "1  Survived  Luxury Class  female  38.0   C85    Cherbourg\n",
      "2  Survived   Lower Class  female  26.0   NaN  Southampton\n",
      "3  Survived  Luxury Class  female  35.0  C123  Southampton\n",
      "4      Died   Lower Class    male  35.0   NaN  Southampton\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "titanic_df = pd.read_csv('titanictrain.csv')\n",
    "\n",
    "# Convert the survived column to strings for easier reading\n",
    "titanic_df ['Survived'] = titanic_df ['Survived'].map({\n",
    "    0: 'Died',\n",
    "    1: 'Survived'\n",
    "})\n",
    "\n",
    "\n",
    "print(\"======Data Headers Before Dropping Columns=======\")\n",
    "print(titanic_df.head(5))\n",
    "\n",
    "print(\"**** \\n\\nDATA TRANSFORMATION *****\\n\")\n",
    "\n",
    "print(\"======Data Headers After Dropping Columns - First Way=======\")\n",
    "titanic_df.drop(['Parch','PassengerId','Name','Ticket'], axis=1, inplace=True)\n",
    "print(titanic_df.head(5))\n",
    "print(\"======Data Headers After Dropping Columns - Second Way =======\")\n",
    "titanic_df = titanic_df.drop(['SibSp','Fare'], axis=1)\n",
    "print(titanic_df.head(5))\n",
    "# Convert the Class column to strings for easier reading\n",
    "titanic_df ['Pclass'] = titanic_df ['Pclass'].map({\n",
    "    1: 'Luxury Class',\n",
    "    2: 'Economy Class',\n",
    "    3: 'Lower Class'\n",
    "})\n",
    "\n",
    "print(\"======Data Headers After Transforming Class Column =======\")\n",
    "print(titanic_df.head(5))\n",
    "\n",
    "titanic_df[\"Embarked\"] = titanic_df[\"Embarked\"].fillna(\"S\")\n",
    "print(\"======Data Headers After Filling with default value for Embarked Column =======\")\n",
    "print(titanic_df.head(5))\n",
    "\n",
    "# Convert the Embarked column to strings for easier reading\n",
    "titanic_df ['Embarked'] = titanic_df ['Embarked'].map({\n",
    "    'C':'Cherbourg',\n",
    "    'Q':'Queenstown',\n",
    "    'S':'Southampton'\n",
    "})\n",
    "print(\"======Data Headers After Transforming Embarked Column =======\")\n",
    "print(titanic_df.head(5))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "\n",
      "**** DATA VISUALIZATIONS****\n",
      "\n",
      "\n",
      "Visualization #1 : Survival Rate Based on Passenger Sitting Class\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Visualization #2 : Survival Rate Based on Gender\n",
      "Survived  Died  Survived\n",
      "Sex                     \n",
      "female      81       233\n",
      "male       468       109\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Visualization #3 : Survival Rate Based on Passenger Age Group\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Visualization #4 : Survival Rate Based on Passenger Embarked Port\n",
      "Survived     Died  Survived\n",
      "Embarked                   \n",
      "Cherbourg      75        93\n",
      "Queenstown     47        30\n",
      "Southampton   427       219\n"
     ]
    },
    {
     "data": {
      "image/png": "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1SxcuHCd9DFjxnDkkUdy6623snTpUgYNGsRRRx3FzTffzCc+8Qlmz57NjBkzOPDAA0tU8+a1S1CIiEeAR9Lwa8B6jYIR8SFwQnvUx8ysGH7/+98zdepUrrrqKiDrcfVvf/sbjz32GN/+9rcBGDhwYIMd6W0q3HW2mVkrvfbaa5SVlbHTTjsxe/ban2FFBPfccw977713CWu3cdzNhZlZKyxatIizzz6b888/f733IBxzzDFcf/311N0Ofe655wA44ogjuPPOOwF48cUXmTFjRvtWuhV8pWBmm5VS9B78wQcfUFlZmT+SOmLECP7t3/5tvXyXXHIJF1xwAQMHDmTNmjX079+fadOmcc4553DGGWew7777su+++3LQQQe1+zq0lIOCmVkzVq9e3ei0ure4Qfbo6s0337xenm7duuUv0tnUufnIzMxyDgpmZpZzUDAzs5yDgpmZ5RwUzMws56BgZmY5P5JqZpuVIZdMbtPyHvhxdYvyjRkzhjvvvJOysjK22morbr75Zj772c9u1LKnTp3KrFmzuPDCCzeqHIDu3buzfPnyjS7HQcHMrBlPPvkk06ZN49lnn6VLly4sXryYjz/+uEXzrlq1ik6dGv5XO3ToUIYOHdqWVd1obj4yM2vGggUL6NWrF126dAGgV69e7LLLLlRUVLB48WIAampq8h+xjR49mhEjRnDYYYcxYsQIDjnkEGbOnJmXN3jwYGpqahg3bhznn38+y5YtY7fddmPNmuwllStWrKBfv36sXLmSV199lSFDhnDQQQdx+OGH89JLLwHw+uuvc+ihhzJgwAAuvvjiNltXBwUzs2YcffTRzJ07l7322otzzz2XRx99tNl5Zs2axUMPPcTEiROprq5mypQpQBZgFixYsM6LebbffnsqKyvzcqdNm8YxxxxD586dGTlyJNdffz21tbVcddVVnHvuuQCMGjWKc845hxdeeIHevXu32bo6KJiZNaN79+7U1tYyduxYysvLqa6uZty4cU3OM3ToULp16wbAiSeeyN133w3AlClTGD58+Hr5q6urmTw5u18yadIkqqurWb58OU888QQnnHAClZWVnHXWWSxYsACAxx9/nJNPPhmAESNGtNWqFvUdzV2Bx4AuaTl3R8SPJI0D/hlYlrKeHhHTlXU3eC1wHPCPlP5ssepnZtYaZWVleT9HAwYMYPz48XTq1Clv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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"\\n\\n\\n**** DATA VISUALIZATIONS****\\n\\n\")\n",
    "print(\"Visualization #1 : Survival Rate Based on Passenger Sitting Class\")\n",
    "ax = sns.countplot(x = 'Pclass', hue = 'Survived', palette = 'Set1',data = titanic_df)\n",
    "ax.set(title = 'Passenger status (Survived/Died) against Passenger Class',\n",
    "       xlabel = 'Passenger Class', ylabel = 'Total')\n",
    "plt.show()\n",
    "\n",
    "print(\"Visualization #2 : Survival Rate Based on Gender\")\n",
    "print(pd.crosstab(titanic_df[\"Sex\"],titanic_df.Survived))\n",
    "ax = sns.countplot(x = 'Sex', hue = 'Survived', palette = 'Set2', data = titanic_df)\n",
    "ax.set(title = 'Total Survivors According to Sex', xlabel = 'Sex', ylabel='Total')\n",
    "plt.show()\n",
    "\n",
    "print(\"Visualization #3 : Survival Rate Based on Passenger Age Group\")\n",
    "# We look at Age column and set Intevals on the ages and the map them to their categories \n",
    "#as (Children, Teen, Adult, Old)\n",
    "\n",
    "interval = (0,18,35,60,120)\n",
    "categories = ['Children','Teens','Adult', 'Old']\n",
    "titanic_df['Age_cats'] = pd.cut(titanic_df.Age, interval, labels = categories)\n",
    "\n",
    "ax = sns.countplot(x = 'Age_cats',  data = titanic_df, hue = 'Survived', palette = 'Set3')\n",
    "\n",
    "ax.set(xlabel='Age Categorical', ylabel='Total',\n",
    "       title=\"Age Categorical Survival Distribution\")\n",
    "plt.show()\n",
    "\n",
    "print(\"Visualization #4 : Survival Rate Based on Passenger Embarked Port\")\n",
    "print(pd.crosstab(titanic_df['Embarked'], titanic_df.Survived))\n",
    "ax = sns.countplot(x = 'Embarked', hue = 'Survived', palette = 'Set1', data = titanic_df)\n",
    "ax.set(title = 'Survival distribution according to Embarking place')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
